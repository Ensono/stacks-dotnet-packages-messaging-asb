name: $(Build.SourceBranchName)-init

# Trigger paths specific for this package, change accordingly
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '*'

# Only build PRs into Main
pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v2.0.6
      # Created when you set up the connection to GitHub from Azure DevOps
      endpoint: amidostacks
      
variables:
  - template: legacy-packages-amido-stacks-messaging-asb-vars.yml

stages:
  - stage: BuildAndRelease
    variables:
      - group: amido-stacks-infra-credentials-nonprod
    jobs:
      - job: BuildAndReleasePackage
        pool:
          vmImage: "windows-2019"
        continueOnError: false  
        
        steps:
          # Update Build Number
          - template: azDevOps/azure/templates/v2/steps/build-updatebuildnumber-dotnet.yml@templates
            parameters:
              sourcebranch_name: "$(Build.SourceBranchName)"
              raw_version_number: "$(Version.Number)"
              default_branch: 'main'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: azDevOps/azure/templates/v3/steps/build/test-validate-yaml.yml@templates
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Build
          - template: azDevOps/azure/templates/v2/steps/build-pack-test-dotnet.yml@templates
            parameters:
              test_path: "$(Test.Path)"
              package_path: "$(Package.Path)"
              package_feed: "$(Package.Feed)"
              dotnet_core_version: "$(DotNet.Version)"

          # Publish
          - task: NuGetCommand@2
            displayName: 'Publish: Push Packages Public'
            condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: "$(Package.nuget_service_connection)"
